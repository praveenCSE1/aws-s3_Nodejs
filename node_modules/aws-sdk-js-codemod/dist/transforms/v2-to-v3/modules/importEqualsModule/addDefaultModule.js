"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addDefaultModule = void 0;
const config_1 = require("../../config");
const getImportEqualsDeclarationType_1 = require("../getImportEqualsDeclarationType");
const getDefaultName_1 = require("./getDefaultName");
const addDefaultModule = (j, source, packageName) => {
    const defaultLocalName = (0, getDefaultName_1.getDefaultName)(packageName);
    const existingImportEquals = source.find(j.TSImportEqualsDeclaration, (0, getImportEqualsDeclarationType_1.getImportEqualsDeclarationType)(packageName));
    if (existingImportEquals.size()) {
        if (existingImportEquals
            .nodes()
            .some((importEqualsDeclaration) => importEqualsDeclaration.id.name === defaultLocalName)) {
            return;
        }
    }
    // Build a new import equals declaration.
    const v3importEqualsDeclaration = j.tsImportEqualsDeclaration(j.identifier(defaultLocalName), j.tsExternalModuleReference(j.stringLiteral(packageName)));
    const v2ImportEquals = source
        .find(j.TSImportEqualsDeclaration, (0, getImportEqualsDeclarationType_1.getImportEqualsDeclarationType)())
        .filter((importEqualsDeclaration) => {
        const { moduleReference } = importEqualsDeclaration.value;
        if (moduleReference.type !== "TSExternalModuleReference")
            return false;
        const { expression } = moduleReference;
        if (expression.type !== "StringLiteral")
            return false;
        const { value } = expression;
        return value.startsWith(config_1.PACKAGE_NAME);
    });
    if (v2ImportEquals.size()) {
        // Insert it after the first import equals declaration.
        v2ImportEquals.at(0).insertAfter(v3importEqualsDeclaration);
        return;
    }
    // Insert it at the top of the document.
    source.get().node.program.body.unshift(v3importEqualsDeclaration);
};
exports.addDefaultModule = addDefaultModule;
