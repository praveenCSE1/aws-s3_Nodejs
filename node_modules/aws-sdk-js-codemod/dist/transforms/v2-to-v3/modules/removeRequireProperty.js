"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeRequireProperty = void 0;
const config_1 = require("../config");
const getRequireDeclaratorsWithProperty_1 = require("./getRequireDeclaratorsWithProperty");
const removeDeclaration_1 = require("./removeDeclaration");
const removeRequireProperty = (j, source, { localName, propertyName, sourceValue }) => {
    const requireDeclarators = (0, getRequireDeclaratorsWithProperty_1.getRequireDeclaratorsWithProperty)(j, source, {
        identifierName: propertyName,
        localName,
        sourceValue,
    });
    requireDeclarators.forEach((varDeclarator) => {
        const varDeclaration = varDeclarator.parentPath.parentPath;
        // Removes variable declarator from the declarations.
        varDeclaration.value.declarations = varDeclaration.value.declarations.filter((declaration) => {
            if (declaration.type === "Identifier")
                return true;
            const id = declaration.id;
            if (id.type !== "Identifier")
                return true;
            if (id.name !== localName)
                return true;
            const init = declaration.init;
            if (!init)
                return true;
            if (init.type !== "MemberExpression")
                return true;
            const object = init.object;
            if (object.type !== "CallExpression")
                return true;
            const callee = object.callee;
            if (callee.type !== "Identifier")
                return true;
            if (callee.name !== "require")
                return true;
            const args = object.arguments;
            if (args.length !== 1)
                return true;
            if (!config_1.STRING_LITERAL_TYPE_LIST.includes(args[0].type))
                return true;
            if (args[0].value !== sourceValue)
                return true;
            const property = init.property;
            if (property.type !== "Identifier")
                return true;
            if (property.name !== propertyName)
                return true;
            return false;
        });
        // Remove VariableDeclaration if there are no declarations.
        if (varDeclaration.value.declarations?.length === 0) {
            (0, removeDeclaration_1.removeDeclaration)(j, source, varDeclaration);
        }
    });
};
exports.removeRequireProperty = removeRequireProperty;
