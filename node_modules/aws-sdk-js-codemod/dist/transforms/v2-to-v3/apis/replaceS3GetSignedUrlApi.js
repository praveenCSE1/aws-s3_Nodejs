"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceS3GetSignedUrlApi = void 0;
const config_1 = require("../config");
const getClientApiCallExpression_1 = require("./getClientApiCallExpression");
const getCommandName_1 = require("./getCommandName");
// Updates `s3.getSignedUrl()` API with `await getSignedUrl(s3, command)` API.
const replaceS3GetSignedUrlApi = (j, source, clientIdentifiers) => {
    for (const clientId of clientIdentifiers) {
        for (const getSignedUrlApiName of ["getSignedUrl", "getSignedUrlPromise"]) {
            source
                .find(j.CallExpression, (0, getClientApiCallExpression_1.getClientApiCallExpression)(clientId, getSignedUrlApiName))
                .replaceWith((callExpression) => {
                const args = callExpression.node.arguments;
                const apiName = args[0].value;
                const params = args[1];
                const options = j.objectExpression([]);
                if (params.type === "ObjectExpression") {
                    // Check if params has property 'Expires' and add it to options.
                    for (const property of params.properties) {
                        if (!config_1.OBJECT_PROPERTY_TYPE_LIST.includes(property.type))
                            continue;
                        const propertyKey = property.key;
                        const propertyValue = property.value;
                        if (propertyKey.type === "Identifier") {
                            const propertyKeyName = propertyKey.name;
                            if (propertyKeyName === "Expires") {
                                // Add 'expiresIn' property to options.
                                options.properties.push(j.objectProperty.from({
                                    key: j.identifier("expiresIn"),
                                    value: propertyValue,
                                    shorthand: true,
                                }));
                                // Remove 'Expires' property from params.
                                params.properties = params.properties.filter((property) => {
                                    if (!config_1.OBJECT_PROPERTY_TYPE_LIST.includes(property.type))
                                        return true;
                                    const propertyKey = property.key;
                                    if (propertyKey.type !== "Identifier")
                                        return true;
                                    return propertyKey.name !== "Expires";
                                });
                            }
                        }
                    }
                }
                else {
                    // Add comment that expiredIn need to explicitly set.
                    options.properties.push(j.objectProperty.from({
                        key: j.identifier("expiresIn"),
                        value: j.literal.from({
                            value: "/* add value from 'Expires' from v2 call if present, else remove */",
                        }),
                        shorthand: true,
                    }));
                }
                const getSignedUrlArgs = [
                    clientId,
                    j.newExpression(j.identifier((0, getCommandName_1.getCommandName)(apiName)), [params]),
                ];
                if (options.properties.length > 0) {
                    getSignedUrlArgs.push(options);
                }
                const outputCallExpression = j.callExpression.from({
                    callee: j.identifier("getSignedUrl"),
                    arguments: getSignedUrlArgs,
                });
                return getSignedUrlApiName.endsWith("Promise")
                    ? outputCallExpression
                    : j.awaitExpression.from({
                        argument: outputCallExpression,
                    });
            });
        }
    }
};
exports.replaceS3GetSignedUrlApi = replaceS3GetSignedUrlApi;
