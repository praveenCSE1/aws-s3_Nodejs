"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClientTypeNames = void 0;
const modules_1 = require("../modules");
const utils_1 = require("../utils");
const getRightIdentifierName = (j, source, tsTypeRef) => source
    .find(j.TSTypeReference, tsTypeRef)
    .nodes()
    .map((node) => node.typeName.right)
    .filter((node) => node.type === "Identifier")
    .map((node) => node.name);
const getClientTypeNames = (j, source, { v2ClientLocalName, v2ClientName, v2GlobalName }) => {
    const clientTypeNames = [];
    if (v2GlobalName) {
        // Support for DynamoDB.DocumentClient
        const [clientName, subClientName] = v2ClientName.split(".");
        clientTypeNames.push(...getRightIdentifierName(j, source, {
            typeName: {
                left: {
                    ...(subClientName
                        ? {
                            left: {
                                left: { type: "Identifier", name: v2GlobalName },
                                right: { type: "Identifier", name: clientName },
                            },
                            right: { type: "Identifier", name: subClientName },
                        }
                        : {
                            left: { type: "Identifier", name: v2GlobalName },
                            right: { type: "Identifier", name: clientName },
                        }),
                },
            },
        }));
    }
    // Support for DynamoDB.DocumentClient
    const [clientName, subClientName] = v2ClientLocalName.split(".");
    clientTypeNames.push(...getRightIdentifierName(j, source, {
        typeName: {
            ...(subClientName
                ? {
                    left: {
                        left: { type: "Identifier", name: clientName },
                        right: { type: "Identifier", name: subClientName },
                    },
                }
                : { left: { type: "Identifier", name: clientName } }),
        },
    }));
    clientTypeNames.push(...(0, modules_1.getImportSpecifiers)(j, source, (0, utils_1.getClientDeepImportPath)(v2ClientName))
        .filter((importSpecifier) => importSpecifier.type === "ImportSpecifier" &&
        importSpecifier.local &&
        importSpecifier.local.type === "Identifier")
        .map((importSpecifier) => importSpecifier.local.name));
    return [...new Set(clientTypeNames)];
};
exports.getClientTypeNames = getClientTypeNames;
