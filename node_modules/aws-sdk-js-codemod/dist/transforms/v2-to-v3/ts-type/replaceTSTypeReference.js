"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceTSTypeReference = void 0;
const config_1 = require("../config");
const getClientTypeNames_1 = require("./getClientTypeNames");
const getTSQualifiedNameFromClientName_1 = require("./getTSQualifiedNameFromClientName");
const getV3ClientType_1 = require("./getV3ClientType");
const isRightSectionIdentifier = (node) => node.typeName.right.type === "Identifier";
const getRightIdentifierName = (node) => node.typeName.right.name;
// Replace v2 client type reference with v3 client type reference.
const replaceTSTypeReference = (j, source, options) => {
    const { v2ClientName, v2ClientLocalName, v2GlobalName, v3ClientName } = options;
    const clientTypeOptions = { v2ClientName, v2ClientLocalName };
    if (v2GlobalName) {
        // Replace type reference to client created with global name.
        source
            .find(j.TSTypeReference, {
            typeName: (0, getTSQualifiedNameFromClientName_1.getTSQualifiedNameFromClientName)(v2GlobalName, v2ClientName),
        })
            .replaceWith((v2ClientType) => j.tsTypeReference(j.identifier(v3ClientName), v2ClientType.node.typeParameters));
        // Replace reference to client types created with global name.
        source
            .find(j.TSTypeReference, {
            typeName: {
                left: (0, getTSQualifiedNameFromClientName_1.getTSQualifiedNameFromClientName)(v2GlobalName, v2ClientName),
            },
        })
            .filter((v2ClientType) => isRightSectionIdentifier(v2ClientType.node))
            .replaceWith((v2ClientType) => {
            const v2ClientTypeName = getRightIdentifierName(v2ClientType.node);
            return (0, getV3ClientType_1.getV3ClientType)(j, { ...clientTypeOptions, v2ClientTypeName });
        });
    }
    const [clientNamePrefix, clientNameSuffix] = v2ClientLocalName.split(".");
    // Replace reference to client types created with client module.
    source
        .find(j.TSTypeReference, {
        typeName: {
            ...(clientNameSuffix
                ? {
                    left: {
                        left: { type: "Identifier", name: clientNamePrefix },
                        right: { type: "Identifier", name: clientNameSuffix },
                    },
                }
                : { left: { type: "Identifier", name: clientNamePrefix } }),
        },
    })
        .filter((v2ClientType) => isRightSectionIdentifier(v2ClientType.node))
        .replaceWith((v2ClientType) => {
        const v2ClientTypeName = getRightIdentifierName(v2ClientType.node);
        return (0, getV3ClientType_1.getV3ClientType)(j, { ...clientTypeOptions, v2ClientTypeName });
    });
    // Replace type reference to client type with modules.
    const clientTypeNames = (0, getClientTypeNames_1.getClientTypeNames)(j, source, {
        v2ClientLocalName,
        v2ClientName,
        v2GlobalName,
    });
    for (const clientTypeName of clientTypeNames) {
        source
            .find(j.TSTypeReference, { typeName: { type: "Identifier", name: clientTypeName } })
            .replaceWith((v2ClientType) => {
            const v2ClientTypeName = v2ClientType.node.typeName.name;
            return (0, getV3ClientType_1.getV3ClientType)(j, { ...clientTypeOptions, v2ClientTypeName });
        });
    }
    if (v2ClientName === config_1.DYNAMODB) {
        (0, exports.replaceTSTypeReference)(j, source, {
            ...options,
            v2ClientName: config_1.DYNAMODB_DOCUMENT_CLIENT,
            v2ClientLocalName: `${v2ClientLocalName}.${config_1.DOCUMENT_CLIENT}`,
        });
    }
};
exports.replaceTSTypeReference = replaceTSTypeReference;
