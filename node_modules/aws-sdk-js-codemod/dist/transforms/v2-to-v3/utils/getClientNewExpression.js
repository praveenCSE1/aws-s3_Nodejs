"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClientNewExpression = void 0;
const getClientNewExpression = ({ v2ClientLocalName, v2ClientName, v2GlobalName, }) => {
    if (!v2GlobalName && !v2ClientLocalName) {
        throw new Error(`One of the following options must be provided: v2ClientLocalName, v2GlobalName`);
    }
    if (v2GlobalName && v2ClientLocalName) {
        throw new Error(`Only one of the following options must be provided: v2ClientLocalName, v2GlobalName`);
    }
    if (v2GlobalName) {
        if (v2ClientName) {
            // Support for DynamoDB.DocumentClient
            const [clientName, subClientName] = v2ClientName.split(".");
            if (subClientName) {
                return {
                    type: "NewExpression",
                    callee: {
                        type: "MemberExpression",
                        object: {
                            type: "MemberExpression",
                            object: { type: "Identifier", name: v2GlobalName },
                            property: { type: "Identifier", name: clientName },
                        },
                        property: { type: "Identifier", name: subClientName },
                    },
                };
            }
            return {
                type: "NewExpression",
                callee: {
                    object: { type: "Identifier", name: v2GlobalName },
                    property: { type: "Identifier", name: clientName },
                },
            };
        }
        return {
            type: "NewExpression",
            callee: {
                object: { type: "Identifier", name: v2GlobalName },
                property: { type: "Identifier" },
            },
        };
    }
    // Support for DynamoDB.DocumentClient
    const [clientName, subClientName] = v2ClientLocalName.split(".");
    if (subClientName) {
        return {
            type: "NewExpression",
            callee: {
                object: { type: "Identifier", name: clientName },
                property: { type: "Identifier", name: subClientName },
            },
        };
    }
    return {
        type: "NewExpression",
        callee: { type: "Identifier", name: clientName },
    };
};
exports.getClientNewExpression = getClientNewExpression;
